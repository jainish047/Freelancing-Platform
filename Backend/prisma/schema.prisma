// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // for migration
}

model user {
  id                  String    @id @default(uuid())
  name                String?
  profilePic          String?
  email               String    @unique
  role                UserRole // Updated to use enum
  password            String? // Made optional
  provider            String    @default("local") // "local", "google", etc.
  googleId            String? // Optional: store Googleâ€™s unique ID
  phoneNumber         String?
  bio                 String?
  skills              String[]
  location            String?
  country             String?
  active              Boolean   @default(true)
  dob                 DateTime?
  languages           String[] // Allows multiple languages
  experience          Json?
  dateJoined          DateTime? @default(now())
  emailVerified       Boolean   @default(false)
  phoneNumberVerified Boolean   @default(false)
  projects            project[] @relation("ClientProjects") // Projects posted by this user
  bids                bid[]     @relation("UserBids") // Bids placed by this user
  freelancingProjects project[] @relation("FreelancerProjects") // Projects user is working on
  likes               like[] // Likes by this user
  bookmarks           bookmark[] // Bookmarks by this user
  lists               list[] // Lists created by this user
}

model project {
  id             String        @id @default(uuid())
  userId         String
  user           user          @relation("ClientProjects", fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String
  minBudget      Int
  maxBudget      Int
  status         ProjectStatus @default(OPEN) // Tracks project progress
  createdAt      DateTime      @default(now())
  dueDate        DateTime?
  documents      String[] // Array of document URLs
  skillsRequired String[] // Example: ["React", "Node.js"]
  paymentMethod  PaymentType?
  bids           bid[]         @relation("ProjectBids") // All bids on this project
  assignedTo     String?       @unique // Ensure only one freelancer per project
  freelancer     user?         @relation("FreelancerProjects", fields: [assignedTo], references: [id], onDelete: SetNull)
  likes          like[] // Likes for this project
  bookmarks      bookmark[] // Bookmarks for this project
  listItems      listItem[] // List items for this project
}

model bid {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  project   project  @relation("ProjectBids", fields: [projectId], references: [id], onDelete: Cascade)
  user      user     @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  proposal  String
  createdAt DateTime @default(now())
}

model like {
  id        String   @id @default(uuid())
  userId    String
  projectId String

  @@index([userId])
  @@index([projectId])
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model bookmark {
  id        String   @id @default(uuid())
  userId    String
  projectId String

  @@index([userId])
  @@index([projectId])
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model list {
  id        String   @id @default(uuid())
  userId    String
  name      String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     listItem[]
  createdAt DateTime @default(now())
}

model listItem {
  id        String   @id @default(uuid())
  listId    String
  projectId String
  list      list     @relation(fields: [listId], references: [id], onDelete: Cascade)
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum PaymentType {
  HOURLY
  FIXED
}

enum UserRole {
  WORK
  HIRE
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model skills {
  id       Int   @id @default(autoincrement())
  name     String
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique
}
